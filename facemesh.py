# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bNizNyPW6o8cb2WKOz62vZS7-TQRM5Ok
"""

!pip install mediapipe opencv-python

from google.colab.patches import cv2_imshow
import cv2
import mediapipe as mp
import numpy as np
from IPython.display import display, Javascript
from google.colab import output
from PIL import Image
import base64
from io import BytesIO

# Kameradan görüntü alıp Python'a gönderen JavaScript kodu
def start_camera():
    display(Javascript('''
        async function captureImage() {
            const video = document.createElement('video');
            video.width = 640;
            video.height = 480;
            video.autoplay = true;
            video.style.display = 'none';

            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            document.body.appendChild(video);
            video.srcObject = stream;

            await new Promise((resolve) => video.onplaying = resolve);

            // Frame alıp Python'a gönder
            setInterval(() => {
                const canvas = document.createElement('canvas');
                canvas.width = video.width;
                canvas.height = video.height;
                const context = canvas.getContext('2d');
                context.drawImage(video, 0, 0, video.width, video.height);

                // Görüntüyü veri URL'si olarak al
                const dataUrl = canvas.toDataURL('image/jpeg');
                google.colab.kernel.invokeFunction('notebook.capture', [dataUrl], {});
            }, 100);  // her 100ms'de bir frame al
        }
        captureImage();
    '''))

# Python tarafında görüntü yakalama ve işleme
def capture(dataUrl):
    img_data = base64.b64decode(dataUrl.split(',')[1])
    img = Image.open(BytesIO(img_data))

    # Görüntüyü numpy array'e dönüştürme
    img_np = np.array(img)
    img_np = cv2.cvtColor(img_np, cv2.COLOR_RGB2BGR)

    # Yüz tespiti için Mediapipe
    mpFaceMesh = mp.solutions.face_mesh
    faceMesh = mpFaceMesh.FaceMesh(max_num_faces=1)
    mpDraw = mp.solutions.drawing_utils
    drawSpec = mpDraw.DrawingSpec(thickness=1, circle_radius=1)

    # Görüntüyü RGB formatına çevir
    imgRGB = cv2.cvtColor(img_np, cv2.COLOR_BGR2RGB)

    results = faceMesh.process(imgRGB)

    if results.multi_face_landmarks:
        for faceLms in results.multi_face_landmarks:
            mpDraw.draw_landmarks(img_np, faceLms, mpFaceMesh.FACEMESH_TESSELATION, drawSpec, drawSpec)

        for id, lm in enumerate(faceLms.landmark):
            h, w, _ = img_np.shape
            cx, cy = int(lm.x * w), int(lm.y * h)
            print([id, cx, cy])

    # FPS hesaplama
    # (FPS hesaplamak için bir yöntem ekleyebilirsiniz, çünkü sürekli akış var)

    # Görüntüyü Colab içinde gösteriyoruz
    cv2_imshow(img_np)
    cv2.waitKey(1)  # Video sürekli akıyor, her frame'i göstermek için

# Kameradan sürekli görüntü alma başlat
start_camera()

# Python tarafında görüntü alındığında 'capture' fonksiyonunu çağırır
output.register_callback('notebook.capture', capture)